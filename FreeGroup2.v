From HoTT Require Import HoTT.
Require Import Subgroup2.

(* Things that should be added to FreeGroup.v or somewhere else in library.
   These results don't use the existence proof in FreeGroup.v.

   - two free groups on same type are iso (only uses IsFreeGroupOn)
   - a free group is generated by its generators

   Other changes to do:
   - change equiv_isfregroupon_isequiv_precomp to equiv_isfreegroupon_isequiv_precomp (extra e).
   - near top of FreeGroup.v, remove "abelian" from comment
*)

(* Two homomorphisms from a free group are equal if they agree on the generators. *)
Definition path_homomorphism_from_free_group
           {S : Type} {F_S : Group} {i : S -> F_S} `{IsFreeGroupOn S F_S i}
           {G : Group} (f g : F_S $-> G) (K : f o i == g o i)
  : f = g.
Proof.
  (* By assumption, the type [FactorsThroughFreeGroup S F_S i G (g o i)] of factorizations of [g o i] through [i] is contractible.  Therefore the two elements we have are equal.  Therefore, their first components are equal. *)
  exact (path_contr (f; K) (g; fun x => idpath))..1.
Defined.  

Definition isfreegroupon_rec
           {S : Type} {F_S : Group} {i : S -> F_S} `{IsFreeGroupOn S F_S i}
           {G : Group} (f : S -> G)
  : F_S $-> G.
Proof.
  exact (center (FactorsThroughFreeGroup S F_S i G f)).1.
Defined.

Definition isfreegroupon_rec_beta
           {S : Type} {F_S : Group} {i : S -> F_S} `{IsFreeGroupOn S F_S i}
           {G : Group} (f : S -> G)
  : isfreegroupon_rec f o i == f.
Proof.
  exact (center (FactorsThroughFreeGroup S F_S i G f)).2.
Defined.

Definition isgeneratedby (G : Group) (X : G -> Type)
  := IsSurjection (subgroup_incl (subgroup_generated X)).
(* There are several equivalent things one could say:
  := IsEquiv (subgroup_incl (subgroup_generated X)).
  := forall g, subgroup_generated X g.
  := subgroup_generated X = maximal_subgroup.
*)

Local Definition to_subgroup_generated `{Funext} (F : Group) (S : Type) (i : S -> F)
      (FG : IsFreeGroupOn S F i)
  : F $-> subgroup_generated (hfiber i).
Proof.
  rapply isfreegroupon_rec.
  intro s.
  snrapply subgroup_generated_gen_incl.
  - exact (i s).
  - exact (s; idpath).
Defined.

Local Definition to_subgroup_generated_beta `{Funext}
      {S : Type} {F_S : Group} {i : S -> F_S} `{IsFreeGroupOn S F_S i}
  : forall s, to_subgroup_generated F_S S i _ (i s) = subgroup_generated_gen_incl _ (i s) (s; idpath). 
Proof.
  intro s.
  snrapply isfreegroupon_rec_beta.
Defined.

Local Definition is_retraction `{Funext}
      {S : Type} {F_S : Group} {i : S -> F_S} `{IsFreeGroupOn S F_S i}
  : grp_homo_compose (subgroup_incl _) (to_subgroup_generated F_S S i _) = grp_homo_id.
Proof.
  apply path_homomorphism_from_free_group.
  cbn.
  intro s.
  exact (ap pr1 (to_subgroup_generated_beta s)).
Defined.

Definition isgenerated_isfreegroupon `{Funext}
           {S : Type} {F_S : Group} {i : S -> F_S} `{IsFreeGroupOn S F_S i}
  : isgeneratedby F_S (hfiber i).
Proof.
  snrapply issurj_retr.
  - rapply to_subgroup_generated.
  - apply ap10.
    exact (ap (grp_homo_map F_S F_S) (is_retraction)).
Defined.

Definition isequiv_subgroup_incl_freegroupon `{Funext}
           {S : Type} {F_S : Group} {i : S -> F_S} `{IsFreeGroupOn S F_S i}
  : IsEquiv (subgroup_incl (subgroup_generated (hfiber i))).
Proof.
  nrapply isequiv_surj_emb.
  - rapply isgenerated_isfreegroupon.
  - exact _.
Defined.

Definition iso_subgroup_incl_freegroupon `{Funext}
           {S : Type} {F_S : Group} {i : S -> F_S} `{IsFreeGroupOn S F_S i}
  : GroupIsomorphism (subgroup_generated (hfiber i)) F_S.
Proof.
  snrapply Build_GroupIsomorphism.
  - apply subgroup_incl.
  - rapply isequiv_subgroup_incl_freegroupon.
Defined.

(* Remove Funext from some results? *)
