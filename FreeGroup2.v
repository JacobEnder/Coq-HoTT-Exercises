From HoTT Require Import HoTT.
Require Import Subgroup2.

(* Things that should be added to FreeGroup.v or somewhere else in library.
   These results don't use the existence proof in FreeGroup.v.

   - two free groups on same type are iso (only uses IsFreeGroupOn)
   - a free group is generated by its generators

   Other changes to do:
   - change equiv_isfregroupon_isequiv_precomp to equiv_isfreegroupon_isequiv_precomp (extra e).
   - near top of FreeGroup.v, remove "abelian" from comment
*)

(* Two homomorphisms from a free group are equal if they agree on the generators. *)
Definition path_homomorphism_from_free_group
           {S : Type} {F_S : Group} {i : S -> F_S} `{IsFreeGroupOn S F_S i}
           {G : Group} (f g : F_S $-> G) (K : f o i == g o i)
  : f = g.
Proof.
  (* By assumption, the type [FactorsThroughFreeGroup S F_S i G (g o i)] of factorizations of [g o i] through [i] is contractible.  Therefore the two elements we have are equal.  Therefore, their first components are equal. *)
  exact (path_contr (f; K) (g; fun x => idpath))..1.
Defined.  

(* Given a function on the generators, there is an induced group homomorphism from the free group. *)
Definition isfreegroupon_rec
           {S : Type} {F_S : Group} {i : S -> F_S} `{IsFreeGroupOn S F_S i}
           {G : Group} (f : S -> G)
  : F_S $-> G.
Proof.
  exact (center (FactorsThroughFreeGroup S F_S i G f)).1.
Defined.

(* The propositional computation rule for the recursor. *)
Definition isfreegroupon_rec_beta
           {S : Type} {F_S : Group} {i : S -> F_S} `{IsFreeGroupOn S F_S i}
           {G : Group} (f : S -> G)
  : isfreegroupon_rec f o i == f.
Proof.
  exact (center (FactorsThroughFreeGroup S F_S i G f)).2.
Defined.

(* We say that a group [G] is generated by a subtype [X] if the natural map from the subgroup generated by [X] to [G] is a surjection.  One could equivalently say [IsEquiv (subgroup_incl (subgroup_generated X))], [forall g, subgroup_generated X g], or [subgroup_generated X = maximal_subgroup], but the definition using surjectivity is convenient later. *)
Definition isgeneratedby (G : Group) (X : G -> Type)
  := IsSurjection (subgroup_incl (subgroup_generated X)).

Section FreeGroupGenerated.
  (* In this Section, we prove that the free group [F_S] on a type [S] is generated in the above sense by the image of [S].  We conclude that the inclusion map is an equivalence, and that the free group is isomorphic as a group to the subgroup. We show that the inclusion is a surjection by showing that it is split epi in the category of groups. *)

  Context {S : Type} {F_S : Group} {i : S -> F_S} `{IsFreeGroupOn S F_S i}.

  (* We define a group homomorphism from [F_S] to the subgroup [G] generated by [S] by sending a generator [s] to "itself".  This map will be a section of the inclusion map. *)
  Local Definition to_subgroup_generated
    : F_S $-> subgroup_generated (hfiber i).
  Proof.
    apply isfreegroupon_rec.
    intro s.
    snrapply subgroup_generated_gen_incl.
    - exact (i s).
    - exact (s; idpath).
  Defined.
  
  (* We record the computation rule that [to_subgroup_generated] satisfies. *)
  Local Definition to_subgroup_generated_beta
    : forall s, to_subgroup_generated (i s) = subgroup_generated_gen_incl (i s) (s; idpath).
  Proof.
    intro s.
    snrapply isfreegroupon_rec_beta.
  Defined.
  
  (* It follows [to_subgroup_generated] is a section of the inclusion map from [G] to [F_S]. *)
  Local Definition is_retraction
    : grp_homo_compose (subgroup_incl _) to_subgroup_generated = grp_homo_id.
  Proof.
    apply path_homomorphism_from_free_group.
    cbn.
    intro s.
    exact (ap pr1 (to_subgroup_generated_beta s)).
  Defined.
  
  (* It follows that the inclusion map is a surjection, i.e., that [F_S] is generated by the image of [S]. *)
  Definition isgenerated_isfreegroupon
    : isgeneratedby F_S (hfiber i).
  Proof.
    snrapply issurj_retr.
    - apply to_subgroup_generated.
    - apply ap10.
      exact (ap (grp_homo_map F_S F_S) (is_retraction)).
  Defined.
  
  (* Therefore, the inclusion map is an equivalence, since it is known to be an embedding. *)
  Definition isequiv_subgroup_incl_freegroupon
    : IsEquiv (subgroup_incl (subgroup_generated (hfiber i))).
  Proof.
    apply isequiv_surj_emb.
    - apply isgenerated_isfreegroupon.
    - exact _.
  Defined.
  
  (* Therefore, the subgroup is isomorphic to the free group. *)
  Definition iso_subgroup_incl_freegroupon
    : GroupIsomorphism (subgroup_generated (hfiber i)) F_S.
  Proof.
    nrapply Build_GroupIsomorphism.
    apply isequiv_subgroup_incl_freegroupon.
  Defined.

End FreeGroupGenerated.
